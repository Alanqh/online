declare module "module_reddot" {
    /**
     * AUTO GENERATE BY UI EDITOR.
     * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
     * AUTHOR: 逝水无痕
     * UI: UI/RedDotTip/RedDotTip.ui
     * TIME: 2023.06.30-17.07.38
    */
    export class RedDotTip_Generate extends mw.UIScript {
        image: mw.Image;
        /**
        * onStart 之前触发一次
        */
        protected onAwake(): void;
    }
}

declare module "module_reddot" {
    /**
     * AUTHOR: 逝水无痕
     * TIME: 2023.06.30-15.49.20
     */
    /**
     * 红点提示UI组件
     */
    export class RedDotTip extends RedDotTip_Generate {
        /**
         * onShow是UI的生命周期函数，被显示的时候会回调，同时会传入参数pos更新红点的位置。
         * @param pos 红点位置
         */
        onShow(pos: Vector2): void;
    }
}

declare module "module_reddot" {
    export class RedDotModuleS extends ModuleS<RedDotModuleC, null> {
    }
}

declare module "module_reddot" {
    /**
     * 红点树模块，主要用来管理红点树，新增，删除，扩容，刷新，同时维护红点UI的对象池。
     */
    export class RedDotModuleC extends ModuleC<RedDotModuleS, null> {
        /**
         * 所有个红点树，每个key对应一个红点树。每个红点树是一条线性的路径。
         */
        private trees;
        /**
         * 红点UI对象池
         */
        private redUIPool;
        /**
         * 正在显示的红点树
         */
        private showList;
        /**
         * 等待移除的红点树
         */
        private removeList;
        /**
         * 缓存需要被显示红点的UI组件，主要是为了多个红点树共用一个UI组件时，不会因为后面的树不显示而覆盖前面的显示状态。
         */
        private uiRedDotState;
        /**
         * 设置指定UI组件需要显示红点。
         * @param ui UI组件
         */
        private setUIShowRedDot;
        /**
         * 获取指定UI组件是否需要显示红点
         * @param ui UI组件
         * @returns
         */
        private getUIShowRedDot;
        /**
         * 压入一个红点UI到对象池中
         * @param tip 红点UI
         */
        private pushRedDotTip;
        /**
         * 从对象池中获取一个红点UI，如果没有则创建一个新的红点UI。
         * @returns
         */
        private getRedDotTip;
        /**
         * 创建一个红点树节点
         * @param ui 需要显示红点的UI组件
         * @returns
         */
        private newNode;
        /**
         * 触发一个红点数事件
         * @param eventName 红点树事件名
         * @returns
         */
        triggerRedDotEvent(eventName: string): void;
        /**
         * 移除一个红点事件
         * @param eventName 红点树事件名
         */
        removeRedDotEvent(eventName: string): void;
        /**
         * 隐藏一个红点树
         */
        hideRedDotEvent(eventName: string): void;
        /**
         * 根据红点数事件名获取对应UI列表
         * @param eventName 红点树事件名
         * @returns
         */
        getRedDotUIArrsByEventName(eventName: string): Array<mw.Widget>;
        /**
         * 根据一颗红点树，扩容一颗新的树
         * @param srcEventName 源的红点树事件名
         * @param newEventName 新的红点树事件名
         * @param concatUiArrays 继续扩容的UI组件
         * @returns
         */
        addRedDotPathByEvt(srcEventName: string, newEventName: string, ...concatUiArrays: Array<mw.Widget>): RedDotModuleC;
        /**
         * 添加一颗红点树
         * @param eventName 红点树事件名
         * @param uiArrays 需要显示红点的UI组件列表
         * @returns
         */
        addRedDotPath(eventName: string, ...uiArrays: Array<mw.Widget>): RedDotModuleC;
        /**
         * Tick函数，每帧调用一次。是ModuleC的生命周期函数，不要手动调用。此处的功能主要是刷新红点树。
         * @param dt
         */
        protected onUpdate(dt: number): void;
    }
}
